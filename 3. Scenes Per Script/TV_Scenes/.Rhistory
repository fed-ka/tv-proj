ratios <- read.csv("~/Desktop/tv-final/5. Plot Tables/TV_Genre_Ratios.csv")
library(tm)
library(koRpus)
library(proxy)
library(ggplot2)
library(reshape2)
library(wordcloud)
library(sfsmisc)
ggplot(data=master.label, aes(x=genre, y=V3)) + geom_bar(stat="identity") + ggtitle("Weighted Average INT/EXT Ratio by Genre")
ggplot(data=ratios, aes(x=genre, y=int.ext.ratio)) +
geom_bar(stat="identity") + ggtitle("INT/EXT Ratio by Genre")
ratios <- read.csv("~/Desktop/tv-final/5. Plot Tables/TV_Genre_Ratios.csv")
ggplot(data=ratios, aes(x=genre, y=int.ext.ratio)) +
geom_bar(stat="identity") + ggtitle("INT/EXT Ratio by Genre")
master.lable <- read.csv("/Users/Fedor/Desktop/tv-final/2. Metadata/TV_Scripts_Master.csv")
ratios <- read.csv("~/Desktop/tv-final/5. Plot Tables/TV_Genre_Ratios.csv")
ggplot(data=master.label, aes(x=genre, y=V3)) + geom_bar(stat="identity") + ggtitle("Weighted Average INT/EXT Ratio by Genre")
library(ggplot2)
ggplot(data=master.label, aes(x=genre, y=V3)) + geom_bar(stat="identity") + ggtitle("Weighted Average INT/EXT Ratio by Genre")
master.label <- read.csv("/Users/Fedor/Desktop/tv-final/2. Metadata/TV_Scripts_Master.csv")
ggplot(data=master.label, aes(x=genre, y=V3)) + geom_bar(stat="identity") + ggtitle("Weighted Average INT/EXT Ratio by Genre")
View(master.label)
ggplot(data=master.label, aes(x=genre, y=int.ext.weighted)) + geom_bar(stat="identity") + ggtitle("Weighted Average INT/EXT Ratio by Genre")
ggplot(data=ratios, aes(x=genre, y=int.percentage)) +
geom_bar(stat="identity") + ggtitle("Percentage of scenes located indoors")
ggplot(data=ratios, aes(x=genre, y=int.ext.ratio)) +
geom_bar(stat="identity") + ggtitle("INT/EXT Ratio by Genre")
ggplot(master.label, aes(x=genre, y=int.percent)) + geom_boxplot() + ggtitle("Percentage of Script Lines Dedicated to Interior Scenes by Genre") + xlab("genre") + ylab("line %")
ggplot(data=ratios, aes(x=genre, y=total.titles)) +
geom_bar(stat="identity") + ggtitle("Total Scripts by Genre")
ggplot(master.label, aes(x=genre, y=int.percent)) + geom_boxplot() +
ggtitle("Percentage of Script Lines Dedicated to Interior Scenes by Genre") +
xlab("genre") + ylab("line %")
domdict <- read.csv("./5.Plot Tables/  ")
setwd("~/Dropbox/1_Research/tv-final/3. Scenes Per Script/TV_Scenes")
domdict <- read.csv("~/Dropbox/1_Research/tv-final/5. Plot Tables/INT-EXT Labels by Space Type/TV_MFW_INT.csv")
View(domdict)
domdict <- read.csv("~/Dropbox/1_Research/tv-final/5. Plot Tables/INT-EXT Labels by Space Type/TV_MFW_INT.csv", header = F)
View(domdict)
domestic <- domdict[which(domdict$V5=='domestic), ]
avg.int = 0
avg.ext = 0
print(length(files))
for (i in 1:length(files)){
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
last.scene = ifelse(grepl("INT", space[len.space, 2]), 1, 0)
print(paste("first.scene:", first.scene))
print(paste("last.scene:", last.scene))
space.split = split(space, rep(1:4, each = ceiling(nrow(space)/4)))
space.one <- data.frame(space.split[1])
space.two <- data.frame(space.split[2])
space.three <- data.frame(space.split[3])
space.four <- data.frame(space.split[4])
search.int.one = length(grep("INT", space.one$X1, value=TRUE))
search.ext.one = length(grep("EXT", space.one$X1, value=TRUE))
one.value = (search.int.one)/(search.int.one + search.ext.one)
print(paste("one.value:", round(one.value, digits=3)))
search.int.two = length(grep("INT", space.two$X2, value=TRUE))
search.ext.two = length(grep("EXT", space.two$X2, value=TRUE))
two.value = (search.int.two)/(search.int.two + search.ext.two)
print(paste("two.value:", two.value))
search.int.three = length(grep("INT", space.three$X3, value=TRUE))
search.ext.three = length(grep("EXT", space.three$X3, value=TRUE))
three.value = (search.int.three)/(search.int.three + search.ext.three)
print(paste("three.value:", three.value))
search.int.four = length(grep("INT", space.four$X4, value=TRUE))
search.ext.four = length(grep("EXT", space.four$X4, value=TRUE))
four.value = (search.int.four)/(search.int.four + search.ext.four)
print(paste("four.value:", four.value))
time[i, 2] <- round(as.numeric(first.scene), digits= 2)
time[i, 3] <- round(as.numeric(one.value), digits = 2)
time[i, 4] <- round(as.numeric(two.value), digits = 2)
time[i, 5] <- round(as.numeric(three.value), digits = 2)
time[i, 6] <- round(as.numeric(four.value), digits = 2)
time[i, 7] <- round(as.numeric(last.scene), digits = 2)
}
#write.table(scenes, file = "../TV_Scripts_Scenes_Int_Ext_Ratio.csv", sep=",")
## attach corresponding ratios to master table
setwd("~/Dropbox/1_Research/tv-final/2. Metadata")
colnames(time) <- c("title", "X0.0", "X0.0~0.25", "X0.25~0.50", "X0.50~0.75", "X0.75~1.0", "X1.0")
master.label <- read.csv("TV_Scripts_Master.csv")
master.table <- master.label
master.table <- apply(master.table, 2, function(y) gsub(".txt", "", y))
master.table <- merge(x=master.table, y=time, by.x="title")
write.table(master.table, file = "TV_Time_Master.csv", sep=",")
}
''
domestic <- domdict[which(domdict$V5=='domestic'),]
domestic <- domdict[which(domdict$V5=='domestic'),]
View(domestic)
workplace <- domdict[which(domdict$V5=='workplace'),]
View(workplace)
View(domdict)
View(domestic)
View(workplace)
dommatch <- domestic$V2
print(dommatch)
workmatch <- workplace$V2
View(workplace)
i = 1
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
first.dom = ifelse(grepl(paste(toMatch,collapse="|"), space[1, 2]), 1, 0)
setwd("~/Dropbox/1_Research/tv-final/3. Scenes Per Script/TV_Scenes")
files <- list.files(path="~/Dropbox/1_Research/tv-final/3. Scenes Per Script/TV_Scenes")
time <- data.frame()
weight.ratios <- data.frame()
domdict <- read.csv("~/Dropbox/1_Research/tv-final/5. Plot Tables/INT-EXT Labels by Space Type/TV_MFW_INT.csv", header = F)
domestic <- domdict[which(domdict$V5=='domestic'),]
dommatch <- domestic$V2
workplace <- domdict[which(domdict$V5=='workplace'),]
workmatch <- workplace$V2
avg.int = 0
avg.ext = 0
print(length(files))
i = 1
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
first.dom = ifelse(grepl(paste(toMatch,collapse="|"), space[1, 2]), 1, 0)
for (i in 1:length(files)){
i = 1
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
first.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[1, 2]), 1, 0)
}
first.work = ifelse(grepl(paste(workmatch,collapse="|"), space[1, 2]), 1, 0)
View(space)
for (i in 1:length(files)){
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
first.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[1, 2]), 1, 0)
first.work = ifelse(grepl(paste(workmatch,collapse="|"), space[1, 2]), 1, 0)
last.scene = ifelse(grepl("INT", space[len.space, 2]), 1, 0)
last.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[len.space, 2]), 1, 0)
last.work = ifelse(grepl(paste(workmatch,collapse="|"), space[len.space, 2]), 1, 0)
print(paste("first.scene:", first.dom, first.work))
print(paste("last.scene:", last.dom, last.work))
space.split = split(space, rep(1:4, each = ceiling(nrow(space)/4)))
space.one <- data.frame(space.split[1])
space.two <- data.frame(space.split[2])
space.three <- data.frame(space.split[3])
space.four <- data.frame(space.split[4])
search.int.one = length(grep("INT", space.one$X1, value=TRUE))
search.ext.one = length(grep("EXT", space.one$X1, value=TRUE))
one.value = (search.int.one)/(search.int.one + search.ext.one)
#print(paste("one.value:", round(one.value, digits=3)))
search.int.two = length(grep("INT", space.two$X2, value=TRUE))
search.ext.two = length(grep("EXT", space.two$X2, value=TRUE))
two.value = (search.int.two)/(search.int.two + search.ext.two)
#print(paste("two.value:", two.value))
search.int.three = length(grep("INT", space.three$X3, value=TRUE))
search.ext.three = length(grep("EXT", space.three$X3, value=TRUE))
three.value = (search.int.three)/(search.int.three + search.ext.three)
#print(paste("three.value:", three.value))
search.int.four = length(grep("INT", space.four$X4, value=TRUE))
search.ext.four = length(grep("EXT", space.four$X4, value=TRUE))
four.value = (search.int.four)/(search.int.four + search.ext.four)
#print(paste("four.value:", four.value))
time[i, 2] <- round(as.numeric(first.scene), digits= 2)
time[i, 3] <- round(as.numeric(one.value), digits = 2)
time[i, 4] <- round(as.numeric(two.value), digits = 2)
time[i, 5] <- round(as.numeric(three.value), digits = 2)
time[i, 6] <- round(as.numeric(four.value), digits = 2)
time[i, 7] <- round(as.numeric(last.scene), digits = 2)
}
one.value.dom = (search.dom.one)/length(space.one$X1)
search.dom.one = length(grep(paste(dommatch,collapse="|"), space.one$X1, value=TRUE))
one.value.dom = (search.dom.one)/length(space.one$X1)
for (i in 1:length(files)){
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
first.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[1, 2]), 1, 0)
first.work = ifelse(grepl(paste(workmatch,collapse="|"), space[1, 2]), 1, 0)
last.scene = ifelse(grepl("INT", space[len.space, 2]), 1, 0)
last.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[len.space, 2]), 1, 0)
last.work = ifelse(grepl(paste(workmatch,collapse="|"), space[len.space, 2]), 1, 0)
print(paste("first.scene:", first.dom, first.work))
print(paste("last.scene:", last.dom, last.work))
space.split = split(space, rep(1:4, each = ceiling(nrow(space)/4)))
space.one <- data.frame(space.split[1])
space.two <- data.frame(space.split[2])
space.three <- data.frame(space.split[3])
space.four <- data.frame(space.split[4])
search.int.one = length(grep("INT", space.one$X1, value=TRUE))
search.ext.one = length(grep("EXT", space.one$X1, value=TRUE))
search.dom.one = length(grep(paste(dommatch,collapse="|"), space.one$X1, value=TRUE))
search.work.one = length(grep(paste(workmatch,collapse="|"), space.one$X1, value=TRUE))
one.value = (search.int.one)/(search.int.one + search.ext.one)
one.value.dom = (search.dom.one)/length(space.one$X1)
one.value.work = (search.work.one)/length(space.one$X1)
#print(paste("one.value:", round(one.value, digits=3)))
search.int.two = length(grep("INT", space.two$X2, value=TRUE))
search.ext.two = length(grep("EXT", space.two$X2, value=TRUE))
two.value = (search.int.two)/(search.int.two + search.ext.two)
#print(paste("two.value:", two.value))
search.int.three = length(grep("INT", space.three$X3, value=TRUE))
search.ext.three = length(grep("EXT", space.three$X3, value=TRUE))
three.value = (search.int.three)/(search.int.three + search.ext.three)
#print(paste("three.value:", three.value))
search.int.four = length(grep("INT", space.four$X4, value=TRUE))
search.ext.four = length(grep("EXT", space.four$X4, value=TRUE))
four.value = (search.int.four)/(search.int.four + search.ext.four)
#print(paste("four.value:", four.value))
time[i, 2] <- round(as.numeric(first.scene), digits= 2)
time[i, 3] <- round(as.numeric(one.value), digits = 2)
time[i, 4] <- round(as.numeric(two.value), digits = 2)
time[i, 5] <- round(as.numeric(three.value), digits = 2)
time[i, 6] <- round(as.numeric(four.value), digits = 2)
time[i, 7] <- round(as.numeric(last.scene), digits = 2)
}
print(paste("dom:", round(one.value.dom, digits=3), "work:", round(one.value.work, digits=3)))
for (i in 1:length(files)){
print(files[i])
space<-as.matrix(read.csv(files[i], header=F))
time[i,1]<- gsub("_Scenes.csv", "", files[i])
len.space = NROW(space)
first.scene = ifelse(grepl("INT", space[1, 2]), 1, 0)
first.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[1, 2]), 1, 0)
first.work = ifelse(grepl(paste(workmatch,collapse="|"), space[1, 2]), 1, 0)
last.scene = ifelse(grepl("INT", space[len.space, 2]), 1, 0)
last.dom = ifelse(grepl(paste(dommatch,collapse="|"), space[len.space, 2]), 1, 0)
last.work = ifelse(grepl(paste(workmatch,collapse="|"), space[len.space, 2]), 1, 0)
print(paste("first.scene:", first.dom, first.work))
print(paste("last.scene:", last.dom, last.work))
space.split = split(space, rep(1:4, each = ceiling(nrow(space)/4)))
space.one <- data.frame(space.split[1])
space.two <- data.frame(space.split[2])
space.three <- data.frame(space.split[3])
space.four <- data.frame(space.split[4])
search.int.one = length(grep("INT", space.one$X1, value=TRUE))
search.ext.one = length(grep("EXT", space.one$X1, value=TRUE))
search.dom.one = length(grep(paste(dommatch,collapse="|"), space.one$X1, value=TRUE))
search.work.one = length(grep(paste(workmatch,collapse="|"), space.one$X1, value=TRUE))
one.value = (search.int.one)/(search.int.one + search.ext.one)
one.value.dom = (search.dom.one)/length(space.one$X1)
one.value.work = (search.work.one)/length(space.one$X1)
print(paste("dom:", round(one.value.dom, digits=3), "work:", round(one.value.work, digits=3)))
search.int.two = length(grep("INT", space.two$X2, value=TRUE))
search.ext.two = length(grep("EXT", space.two$X2, value=TRUE))
two.value = (search.int.two)/(search.int.two + search.ext.two)
#print(paste("two.value:", two.value))
search.int.three = length(grep("INT", space.three$X3, value=TRUE))
search.ext.three = length(grep("EXT", space.three$X3, value=TRUE))
three.value = (search.int.three)/(search.int.three + search.ext.three)
#print(paste("three.value:", three.value))
search.int.four = length(grep("INT", space.four$X4, value=TRUE))
search.ext.four = length(grep("EXT", space.four$X4, value=TRUE))
four.value = (search.int.four)/(search.int.four + search.ext.four)
#print(paste("four.value:", four.value))
time[i, 2] <- round(as.numeric(first.scene), digits= 2)
time[i, 3] <- round(as.numeric(one.value), digits = 2)
time[i, 4] <- round(as.numeric(two.value), digits = 2)
time[i, 5] <- round(as.numeric(three.value), digits = 2)
time[i, 6] <- round(as.numeric(four.value), digits = 2)
time[i, 7] <- round(as.numeric(last.scene), digits = 2)
}
